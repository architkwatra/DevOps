
# Java setup.

- name: Ensure 'man' directory exists.
  file:
    path: /usr/share/man/man1
    state: directory
    recurse: true

- name: Install Java
  apt:
    name: "openjdk-8-jdk"
    state: present

# export JAVA_HOME={{ java_home }}

- name: Set JAVA_HOME if configured.
  template:
    src: java_home.sh.j2
    dest: /etc/profile.d/java_home.sh
    mode: 0644
  when: java_home is defined and java_home

- name: Add sign key for Jenkins
  apt_key:
    url: https://pkg.jenkins.io/debian/jenkins-ci.org.key
    state: present

- name: Add Jenkins apt repository.
  apt_repository:
    repo: deb https://pkg.jenkins.io/debian-stable binary/
    state: present
    update_cache: true
  when: jenkins_repo_url | default(false)
  tags: ['skip_ansible_lint']

# - name: Update packages
#   become: true
#   apt:
#     upgrade: yes
#     update_cache: yes

- name: Download specific Jenkins version.
  get_url:
    url: "https://pkg.jenkins.io/debian/binary/jenkins_2.283_all.deb"
    dest: "/tmp/jenkins_2.283_all.deb"

- name: Check if we downloaded a specific version of Jenkins.
  stat:
    path: "/tmp/jenkins_2.283_all.deb"
  register: specific_version

- name: Install our specific version of Jenkins.
  apt:
    deb: "/tmp/jenkins_2.283_all.deb"
    state: present
  notify: configure default users

- name: Check if jenkins_init_file exists.
  stat:
    path: /etc/default/jenkins
  register: jenkins_init_file_stat

- name: Ensure jenkins_init_file exists.
  file:
    path: /etc/default/jenkins
    state: touch
  when: not jenkins_init_file_stat.stat.exists

- name: Modify variables in init file.
  lineinfile:
    dest: /etc/default/jenkins
    insertafter: '^{{ item.option }}='
    regexp: '^{{ item.option }}=\"\${{ item.option }} '
    line: '{{ item.option }}="${{ item.option }} {{ item.value }}"'
    state: present
  with_items: "{{ jenkins_init_changes }}"
  register: jenkins_init_prefix


- name: Set HTTP port in Jenkins config.
  lineinfile:
    backrefs: true
    dest: /etc/default/jenkins
    regexp: '^HTTP_PORT='
    line: 'HTTP_PORT=9000'
  register: jenkins_http_config


- name: Create custom init scripts directory.
  file:
    path: "/var/lib/jenkins/init.groovy.d"
    state: directory
    owner: "jenkins"
    group: "jenkins"
    mode: 0775

- name: Configure proxy config for Jenkins
  template:
    src: proxy.xml
    dest: "/var/lib/jenkins/proxy.xml"
    owner: "jenkins"
    group: "jenkins"
    mode: 0664
  register: jenkins_proxy_config
  when:
    - jenkins_proxy_host | length > 0
    - jenkins_proxy_port | length > 0

- name: Restart Jenkins
  become: true
  systemd: 
    name: jenkins
    state: restarted
    enabled: true

# - name: disable csrf so we can install plugin
#   lineinfile:
#     path: /etc/default/jenkins
#     regexp: ‘JAVA_ARGS=”- Djava.awt.headless=true’
#     line: JAVA_ARGS=”- Djava.awt.headless=true – Dhudson.security.csrf.DefaultCrumbIssuer.EXCLUDE_SESSION_ID=true”

  
# - name: restart jenkins
#   service:
#     name: jenkins
#     state: restarted


- name: Wait for Jenkins to start up
  uri:
    url: http://192.168.33.20:9000/
    status_code: 200
    timeout: 5
  register: jenkins_service_status
  # Keep trying for 5 mins in 5 sec intervals
  retries: 20
  delay: 5
  until: >
     'status' in jenkins_service_status and
     jenkins_service_status['status'] == 200

- name: wait for 1 min till the jenkins is ready
  pause:
    minutes: 1

- name: Install plugin
  jenkins_plugin:
    name: workflow-aggregator
    # workflow-aggregator
    # build-pipeline-plugin
    # params: "{{ my_jenkins_params }}"    
    url_username: admin
    url_password: admin
    url: http://192.168.33.20:9000/
  register: plugin_result
  until: plugin_result is success
  retries: 5
  delay: 2
    

# - name: wait for 1 min till the plugin is enabled
#   pause:
#     minutes: 1

# - name: Check if restart is required by any of the unversioned plugins
#   set_fact:
#     jenkins_restart_required: yes
#   # when: item.changed
#   # with_items: "{{ my_jenkins_plugin_unversioned.results }}"

# - name: Restart Jenkins if required
#   service:
#     name: jenkins
#     state: restarted
#   when: jenkins_restart_required

# - name: Wait for Jenkins to start up
#   uri:
#     url: http://192.168.33.20:9000/
#     status_code: 200
#     timeout: 5
#   register: jenkins_service_status
#   # Keep trying for 5 mins in 5 sec intervals
#   retries: 20
#   delay: 5
#   until: >
#       'status' in jenkins_service_status and
#       jenkins_service_status['status'] == 200
#   when: jenkins_restart_required

# - name: Reset the fact
#   set_fact:
#     jenkins_restart_required: no 
#   when: jenkins_restart_required


- name: restart jenkins
  service:
    name: jenkins
    state: restarted


- name: Wait for Jenkins to start up
  uri:
    url: http://192.168.33.20:9000/
    status_code: 200
    timeout: 5
  register: jenkins_service_status
  # Keep trying for 5 mins in 5 sec intervals
  retries: 20
  delay: 5
  until: >
     'status' in jenkins_service_status and
     jenkins_service_status['status'] == 200

- name: wait for 1 min till the plugin is enabled
  pause:
    minutes: 1